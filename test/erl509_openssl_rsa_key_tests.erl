-module(erl509_openssl_rsa_key_tests).
-include_lib("eunit/include/eunit.hrl").
-include_lib("public_key/include/public_key.hrl").

rsa_from_pem_test() ->
    % We generated an RSA key with openssl; can we read it in?
    Pem = read_file("openssl-rsa-2048.key"),
    Key = erl509_private_key:from_pem(Pem),
    ?assertEqual(expected_key(), Key),

    % Do we write the same thing back out?
    ?assertEqual(Pem, strip_trailing_lf(erl509_private_key:to_pem(Key))),
    ok.

rsa_from_pkcs8_pem_test() ->
    % Wrapped in PKCS#8; can we read it in?
    Pem = read_file("openssl-rsa-2048-p8.key"),
    Key = erl509_private_key:from_pem(Pem),
    ?assertEqual(expected_key(), Key),

    % Do we write the same thing back out?
    ?assertEqual(Pem, strip_trailing_lf(erl509_private_key:to_pem(Key, [wrap]))),
    ok.

read_file(Name) ->
    Path = filename:join(["test", atom_to_list(?MODULE), Name]),
    {ok, Data} = file:read_file(Path),
    Data.

% openssl puts one LF at the end; Erlang puts two.
strip_trailing_lf(Bytes) ->
    binary:part(Bytes, 0, byte_size(Bytes) - 1).

expected_key() ->
    % This is the known content of the file.
    #'RSAPrivateKey'{
        version = 'two-prime',
        modulus =
            28103888649110269839445857360000662236370087872938268926918572245766315747000003879609209206004229322970694241637183147801367652688913906158142618041161490466551131363220966082637178630235425176469208413228872447525644551353643843252819533736881404679684266077420243064229947215924355336891748801338161855651469473303925100978603353020102043618903153389912044766435395978975816729213613713995398672505801797240910700519964734164319361917592893311499178810118074756957974721761165925253178660294201050071337655104357984872405232636997229683395865102843150696347979621337736791087165759354234273068496893240828646597067,
        publicExponent = 65537,
        privateExponent =
            8574351183895507048533193736564280351804628027212119675812698964769481107790485947980318569267048618533027623503295497814796927163508148887377537081847261880749650908763037930059819441102847649472844686551281025806418707055802197931552048111279791363203791754551135390226555908607465782094855078547332747970527001412306788211963243021698629177735976535495149311777001985270550196930816279614690555333295026917870308972557812516107818310445484708144799084906157181329584162214125498712808138439363580579251300341555284402364990838986406481004886420023665363455654758270927778171852192227617633819475346658280828426833,
        prime1 =
            168028803409450613399709674599487831773919185759350147600701767515160264551447623874444953878929681769769922184237163033690420885278408188946799955229824989014560958902073857095745168409502545519952104622656523080629616674943830421012378119790385523925979886934430772110664960107991326540483808862692352400249,
        prime2 =
            167256375566914228797788986259592025124598334848088444994765273792436996982500847955013487325138873204750858899142356883659294190020625091660370971542672213915058812170062670350916514195247592802328662735539487604339036586476899060052042056366545771332064956068632660734506444556501667826990038919584123523683,
        exponent1 =
            96373570522877750081353845286176482117732704785208549341025355739923389600139840606321793358791031143382846407117974903846517702316707896521373628898696789783913390667410076969833302338294264057699920055251782139520982974418475696101961962628756297341252391320602381751801046515697788628259546383565662669529,
        exponent2 =
            123146037966802146606950454765767337356565656826293723184344854911064931495134251131014019620976334723115845926122894650460227391413479752626575529698468992142504735701085402634279484252609702847105680195583973867771969000828078953029451841644489877536141879017650056890338884434515998255271836489108331360731,
        coefficient =
            6102993735941455797585470007383347353823478237684186951087081974070230722933548852350326974667147447555321500468966037018217539365300656741964113596454622461073723101271123355571690787846231969315624070510329037229747920243221940765042017688017501187241937919006610055364032222491243397363783785401465080548,
        otherPrimeInfos = asn1_NOVALUE
    }.
